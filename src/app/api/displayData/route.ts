import { NextResponse } from 'next/server';
import { GoogleSpreadsheet } from 'google-spreadsheet'
import { JWT } from 'google-auth-library';


export async function GET(req: Request, res: Response) {
  console.log('hello');



  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: process.env.GOOGLE_PRIVATE_KEY?.split(String.raw`\n`).join('\n'),
    scopes: [
      'https://www.googleapis.com/auth/spreadsheets',
    ],
  });




  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID ?? '', serviceAccountAuth);

  // console.log(doc);
  try {

    // doc.useServiceAccountAuth({
    //   client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    //   private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, '\n')
    // });

    await doc.loadInfo();


    console.log('hello');

    const sheet = doc.sheetsByIndex[0];
    console.log({sheet});
    const rows = await sheet.getRows();
    // console.log(rows[0].get('Index'));
    console.log({rows})
    // const raw_data = rows[0]._rawData;
    // const header_values = rows[0]._sheet.headerValues;

    // const raws_data = rows.map((row) => {
    //   return row._rawData;
    // });
    // console.log(raws_data);

    // const max = Math.max(...raw_data.map((item) => item));

    // const results = header_values.map((result, index) => {
    //   const count = raw_data[index];
    //   console.log(count);
    //   return {
    //     value: result,
    //     count: count,
    //   };
    // });
    // console.log(results);

    // const rawsDataFormatted = raws_data.map(row => row.map((item, index) => index === 1 ? parseInt(item) : item));

    // const minRow = rawsDataFormatted.reduce((min, row) => row[1] < min[1] ? row : min, rawsDataFormatted[0]);

    // console.log(minRow);

    // const formattedResult = header_values.reduce((acc, data, index) => {
    //   acc[data] = minRow[index];
    //   return acc;
    // }, {});

    // const minRowIndex = minRow[0]-1;
    // const rowToUpdate = rows[minRowIndex];
    // const rowAppearedValue = rowToUpdate.Appeared;
    // console.log(rowAppearedValue);

    // rowToUpdate.Appeared = Number(rowAppearedValue) + 1;
    // await rows[minRowIndex].save();
   
    // console.log(minRowIndex);

    return NextResponse.json({ message: 'A ok!', data: 'formattedResult' })

    
  } catch (error) {
    console.log(error);
    return NextResponse.json(error);
  }
}